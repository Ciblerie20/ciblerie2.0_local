
#include <WiFi.h>
#include <BluetoothSerial.h>

// Configuration WiFi (modifiable via Bluetooth)
String ssid = "Livebox-9410";
String password = "37322944";

// Cr√©ation de l'objet Bluetooth Serial
BluetoothSerial SerialBT;

void connectToWiFi();
void ensureWiFiConnection();
void handleBluetoothCommands();
void sendBluetoothWelcomeMessage();

void setup() {
  Serial.begin(115200);

  // Initialisation Bluetooth
  SerialBT.begin("üñ•Ô∏è ESP32_BT_Config"); // Nom Bluetooth de l'ESP32
  Serial.println("üì° Bluetooth initialis√©. Connectez-vous √† 'ESP32_BT_Config'.");
  
  // Envoyer un message de bienvenue et les commandes disponibles √† la connexion
  SerialBT.register_callback([](esp_spp_cb_event_t event, esp_spp_cb_param_t *param) {
    if (event == ESP_SPP_SRV_OPEN_EVT) {
      sendBluetoothWelcomeMessage();
    }
  });

  // Connexion initiale au r√©seau WiFi
  connectToWiFi();
}

void loop() {
  // V√©rifie et force la reconnexion WiFi si n√©cessaire
  ensureWiFiConnection();

  // Gestion des commandes Bluetooth
  handleBluetoothCommands();
}

// Connexion au r√©seau WiFi avec retour d'√©tat
void connectToWiFi() {
  Serial.println("üåê Tentative de connexion au WiFi...");
  SerialBT.println("üåê Tentative de connexion au WiFi...");

  WiFi.begin(ssid.c_str(), password.c_str());

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) { // Essayer 20 fois avant d'abandonner
    delay(500);
    Serial.print(".");
    SerialBT.print(".");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ Connexion WiFi r√©ussie !");
    SerialBT.println("\n‚úÖ Connexion WiFi r√©ussie !");
    Serial.print("üì∂ Adresse IP : ");
    Serial.println(WiFi.localIP());
    SerialBT.print("üì∂ Adresse IP : ");
    SerialBT.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå Connexion WiFi √©chou√©e. V√©rifiez le SSID et le mot de passe.");
    SerialBT.println("\n‚ùå Connexion WiFi √©chou√©e. V√©rifiez le SSID et le mot de passe.");
  }
}

// V√©rifie et force la reconnexion au WiFi si n√©cessaire
void ensureWiFiConnection() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è WiFi d√©connect√©. Tentative de reconnexion...");
    SerialBT.println("‚ö†Ô∏è WiFi d√©connect√©. Tentative de reconnexion...");
    connectToWiFi();
  }
}

// Gestion des commandes Bluetooth
void handleBluetoothCommands() {
  if (SerialBT.available()) {
    String command = SerialBT.readStringUntil('\n');
    command.trim();

    if (command.startsWith("SSID:")) {
      ssid = command.substring(5); // Extraire le SSID
      Serial.println("‚úÖ SSID mis √† jour : " + ssid);
      SerialBT.println("‚úÖ SSID mis √† jour : " + ssid);
    } else if (command.startsWith("PASS:")) {
      password = command.substring(5); // Extraire le mot de passe
      Serial.println("‚úÖ Mot de passe mis √† jour.");
      SerialBT.println("‚úÖ Mot de passe mis √† jour.");
    } else if (command == "RESTART") {
      Serial.println("üîÑ Red√©marrage de l'ESP32...");
      SerialBT.println("üîÑ Red√©marrage de l'ESP32...");
      ESP.restart();
    } else {
      Serial.println("‚ö†Ô∏è Commande inconnue : " + command);
      SerialBT.println("‚ö†Ô∏è Commande inconnue : " + command);
    }

    // Toujours tenter de se reconnecter apr√®s un changement
    connectToWiFi();
  }
}

// Message de bienvenue et rappel des commandes disponibles
void sendBluetoothWelcomeMessage() {
  SerialBT.println("üîó Bienvenue sur ESP32_BT_Config !");
  SerialBT.println("Voici les informations actuelles et commandes disponibles :");

  // Informations sur l'√©tat WiFi
  if (WiFi.status() == WL_CONNECTED) {
    SerialBT.println("‚úÖ WiFi connect√© !");
    SerialBT.print("üì∂ Adresse IP : ");
    SerialBT.println(WiFi.localIP());
  } else {
    SerialBT.println("‚ùå WiFi non connect√©.");
  }

  // Commandes disponibles
  SerialBT.println("\n‚öôÔ∏è Commandes disponibles :");
  SerialBT.println(" - SSID:<NomDuReseau> : Changer le SSID.");
  SerialBT.println(" - PASS:<MotDePasse> : Changer le mot de passe.");
  SerialBT.println(" - RESTART : Red√©marrer l'ESP32.");
}
