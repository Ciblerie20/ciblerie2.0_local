#include <WiFi.h>                // Biblioth√®que WiFi pour ESP32
#include <WebSocketsServer.h>    // Serveur WebSocket

// Configuration WiFi
const char* ssid = "Livebox-9410";
const char* password = "37322944";

// Cr√©ation du serveur WebSocket sur le port 81
WebSocketsServer webSocket = WebSocketsServer(81);

void connectToWiFi();
void ensureWiFiConnection(); // V√©rifie et force la reconnexion au WiFi
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length);
void processIncomingSerialData();
String convertToJSON(String data);

void setup() {
  Serial.begin(115200);

  // Initialisation de la liaison s√©rie avec l'Arduino M√©ga
  Serial1.begin(9600, SERIAL_8N1, 16, 17); // Utilisez directement Serial1
  Serial.println("üîó Liaison s√©rie avec Arduino M√©ga initialis√©e.");

  // Connexion au r√©seau WiFi
  connectToWiFi();

  // D√©marrage du serveur WebSocket
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
}

void loop() {
  // V√©rifie et force la reconnexion WiFi si n√©cessaire
  ensureWiFiConnection();

  // Gestion des √©v√©nements WebSocket
  webSocket.loop();

  // Traitement des donn√©es s√©rie provenant de l'Arduino M√©ga
  processIncomingSerialData();
}

// Connexion initiale au r√©seau WiFi
void connectToWiFi() {
  Serial.println("üîå Tentative de connexion au WiFi...");

  WiFi.begin(ssid, password);

  // Attendre la connexion WiFi
  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) { // Essayer 20 fois avant d'abandonner
    delay(500);
    Serial.print(".");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi connect√© !");
    Serial.print("üì∂ Adresse IP : ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå Impossible de se connecter au WiFi. Nouvelle tentative dans 5 secondes...");
    delay(5000); // Attendre 5 secondes avant une nouvelle tentative
  }
}

// V√©rifie et force la reconnexion au WiFi si n√©cessaire
void ensureWiFiConnection() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è WiFi d√©connect√©. Tentative de reconnexion...");
    connectToWiFi();
  }
}

// Gestion des √©v√©nements WebSocket
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  if (type == WStype_TEXT) {
    String message = String((char*)payload);
    Serial.println("üì® Message re√ßu : " + message);
  }
}

// Traitement des donn√©es s√©rie re√ßues de l'Arduino M√©ga
void processIncomingSerialData() {
  while (Serial1.available()) {
    String incomingData = Serial1.readStringUntil('\n'); // Lecture ligne par ligne
    incomingData.trim();

    if (!incomingData.isEmpty()) { // V√©rifie que les donn√©es ne sont pas vides

      // Si les donn√©es correspondent √† un joueur
      if (incomingData.startsWith("J")) {
        int colon1 = incomingData.indexOf(':');
        int colon2 = incomingData.lastIndexOf(':');

        // Extraction des informations
        String joueur = incomingData.substring(0, colon1);
        String points = incomingData.substring(colon1 + 1, colon2);
        String cumul = incomingData.substring(colon2 + 1);

        // Correction du format d'affichage
        Serial.printf("üì• Re√ßu : %s : %s : %s\n", joueur.c_str(), points.c_str(), cumul.c_str());

        // Conversion en JSON
        String jsonData = "{\"playerIndex\": " + String(joueur.substring(1).toInt() - 1) +
                          ", \"point\": " + points +
                          ", \"score\": " + cumul + "}";

        // Envoi via WebSocket
        webSocket.broadcastTXT(jsonData);
        Serial.printf("üì§ Donn√©es envoy√©es : {\"playerIndex\": %d, \"point\": %s , \"score\": %s}\n",
                      joueur.substring(1).toInt() - 1, points.c_str(), cumul.c_str());

      } else if (incomingData.startsWith("Groupe : ")) {
        // Donn√©es correspondant √† un groupe
        String groupe = incomingData.substring(9); // Extraire le nom du groupe
        Serial.printf("üì• Re√ßu : %s\n", groupe.c_str());
        String jsonData = "{\"type\": \"groupe\", \"value\": \"" + groupe + "\"}";
        webSocket.broadcastTXT(jsonData);
        Serial.println("üì§ Donn√©es envoy√©es via WebSocket (JSON) : " + jsonData);

      } else if (incomingData == "FIN GAME") {
        // Donn√©es correspondant √† la fin du jeu
        Serial.println("üì• Re√ßu : FIN GAME");
        String jsonData = "{\"type\": \"fin\", \"message\": \"FIN GAME\"}";
        webSocket.broadcastTXT(jsonData);
        Serial.println("üì§ Donn√©es envoy√©es via WebSocket (JSON) : " + jsonData);

      } else {
        // Donn√©es g√©n√©rales ou autres formats
        String jsonData = convertToJSON(incomingData);
        webSocket.broadcastTXT(jsonData);
        Serial.println("üì§ Donn√©es envoy√©es via WebSocket (JSON) : " + jsonData);
      }
    } else {
      Serial.println("‚ö†Ô∏è Donn√©es non valides re√ßues !");
    }
  }
}

// Fonction pour convertir les donn√©es re√ßues en JSON
String convertToJSON(String data) {
  String json = "{";

  if (data.startsWith("Groupe : ")) {
    json += "\"type\": \"groupe\", \"value\": \"" + data.substring(9) + "\"";
  } else if (data == "FIN GAME") {
    json += "\"type\": \"fin\", \"message\": \"FIN GAME\"";
  }

  json += "}";
  return json;
}