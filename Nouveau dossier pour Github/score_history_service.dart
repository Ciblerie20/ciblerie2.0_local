import 'package:flutter/foundation.dart';

class ScoreHistoryService with ChangeNotifier {
  final List<List<int>> _history = [];
  List<int>? _currentGame; // Partie en cours (scores des joueurs)

  List<List<int>> get history => _history;
  List<int>? get currentGame => _currentGame;

  // Ajouter un enregistrement des scores (ex: [10, 5, 3, 8])
  void addScores(List<int> scores) {
    if (scores.length != 4) {
      throw ArgumentError("Les scores doivent contenir exactement 4 joueurs.");
    }
    _history.add(List.from(scores)); // Copie d√©fensive
    notifyListeners();
    _logMessage('üìä Nouvelle partie enregistr√©e : $scores');
  }

  // Mettre √† jour les scores de la partie en cours
  void updateCurrentGame(List<int> scores) {
    if (scores.length != 4) {
      throw ArgumentError("Les scores doivent contenir exactement 4 joueurs.");
    }
    _currentGame = List.from(scores); // Copie d√©fensive
    notifyListeners();
    _logMessage('üîÑ Partie en cours mise √† jour : $scores');
  }

  // Enregistrer la partie en cours dans l'historique
  void saveCurrentGame() {
    if (_currentGame != null) {
      addScores(_currentGame!);
      _currentGame = null; // R√©initialiser la partie en cours
      _logMessage('‚úÖ Partie en cours enregistr√©e dans l‚Äôhistorique.');
    } else {
      _logMessage('‚ö†Ô∏è Aucune partie en cours √† enregistrer.');
    }
  }

  // R√©cup√©rer les derniers scores enregistr√©s
  List<int>? getLastGame() {
    if (_history.isNotEmpty) {
      return _history.last;
    }
    return null;
  }

  // R√©initialiser les scores d‚Äôun joueur sp√©cifique dans l‚Äôhistorique
  void resetPlayerScoreInHistory(int playerIndex) {
    for (var entry in _history) {
      if (playerIndex < entry.length) {
        entry[playerIndex] = 0;
      }
    }
    notifyListeners();
    _logMessage('üîÑ Score du joueur ${playerIndex + 1} remis √† z√©ro dans l‚Äôhistorique.');
  }

  // Supprimer tout l‚Äôhistorique des parties
  void clearHistory() {
    _history.clear();
    _currentGame = null; // R√©initialiser la partie en cours
    notifyListeners();
    _logMessage('üóëÔ∏è Historique des parties supprim√©.');
  }

  // M√©thode priv√©e pour journaliser les messages
  void _logMessage(String message) {
    if (kDebugMode) {
      // Affiche uniquement en mode debug
      print(message);
    }
  }
}